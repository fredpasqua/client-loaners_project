[{"/Users/fredpasqua/Desktop/client-loaners_project/src/index.js":"1","/Users/fredpasqua/Desktop/client-loaners_project/src/App.js":"2","/Users/fredpasqua/Desktop/client-loaners_project/src/reportWebVitals.js":"3","/Users/fredpasqua/Desktop/client-loaners_project/src/instrumentList.js":"4","/Users/fredpasqua/Desktop/client-loaners_project/src/AddLoaner.js":"5","/Users/fredpasqua/Desktop/client-loaners_project/src/select.js":"6"},{"size":535,"mtime":1673811716071,"results":"7","hashOfConfig":"8"},{"size":233,"mtime":1674447049162,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1673810299579,"results":"10","hashOfConfig":"8"},{"size":10810,"mtime":1674516871834,"results":"11","hashOfConfig":"8"},{"size":3813,"mtime":1674512487792,"results":"12","hashOfConfig":"8"},{"size":1072,"mtime":1674436173172,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14zz7g9",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/fredpasqua/Desktop/client-loaners_project/src/index.js",[],[],"/Users/fredpasqua/Desktop/client-loaners_project/src/App.js",[],[],[],"/Users/fredpasqua/Desktop/client-loaners_project/src/reportWebVitals.js",[],[],"/Users/fredpasqua/Desktop/client-loaners_project/src/instrumentList.js",["35"],[],"import React, { useState, useEffect } from \"react\";\nimport { Audio } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport { Button, InputGroup, Form, Card } from \"react-bootstrap\";\nimport ReactModal from \"react-modal\";\nimport AddLoaner from \"./AddLoaner\";\nimport Alert from \"react-bootstrap/Alert\";\nimport DropDown from \"./select\";\n\n// import loaners from \"./instruments.js\";\n\nfunction InstrumentList() {\n  const [instruments, setInstruments] = useState([]);\n  const [selectedInstrument, setSelectedInstrument] = useState({});\n  const [query, setQuery] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [selectedType, setSelectedType] = useState(\"\");\n  // const [selectedLocation, setSelectedLocation] = useState(\"\");\n\n  const [updater, setUpdater] = useState(0);\n  const [formData, setFormData] = useState({\n    type: \"\",\n    brand: \"\",\n    serial: \"\",\n    barcode: \"\",\n    location: \"\",\n    dateLastServiced: \"\",\n  });\n  const [deleteMessage, setDeleteMessage] = useState({\n    message: \"\",\n    show: false,\n  });\n  const onRequestClose = () => {\n    setShowModal(false);\n  };\n  const forceUpdate = () => {\n    setUpdater(updater + 1);\n  };\n\n  useEffect(\n    () =>\n      async function getLoaners() {\n        await axios\n          .get(\"https://horntrax-api.herokuapp.com/loaners/\")\n          .then((res) => setInstruments(res.data));\n      },\n    [updater]\n  );\n\n  //Drop Down Menu Calls this function to set state of SelecetedDepartments\n  const updateSelectedType = (e) => {\n    setSelectedType(e);\n  };\n  //creates a list of  instruments prefiltered by selectedDepartment state\n  let preFilteredInstruments = [];\n  selectedType.length > 0\n    ? (preFilteredInstruments = instruments.filter((instrument) => {\n        return instrument.type\n          .toLowerCase()\n          .includes(selectedType.toLowerCase());\n      }))\n    : (preFilteredInstruments = instruments);\n  let filteredInstruments = [];\n  query.length > 0\n    ? (filteredInstruments = preFilteredInstruments.filter((instrument) => {\n        return (\n          instrument.type.toLowerCase().includes(query.toLowerCase()) ||\n          instrument.brand.toLowerCase().includes(query.toLowerCase()) ||\n          instrument.serial.toLowerCase().includes(query.toLowerCase()) ||\n          instrument.location.toLowerCase().includes(query.toLowerCase()) ||\n          instrument.barcode.toString().includes(query)\n        );\n      }))\n    : (filteredInstruments = preFilteredInstruments);\n\n  const clear = (e) => {\n    setQuery(\"\");\n  };\n  async function deleteLoaner(key) {\n    await axios\n      .get(`https://horntrax-api.herokuapp.com/loaners/delete/${key}`)\n      .then((res) => setDeleteMessage({ message: res.data, show: true }))\n      .then((res) =>\n        setTimeout(() => {\n          setDeleteMessage({ message: \"\", show: false });\n          setShowModal(false);\n        }, 2000)\n      );\n\n    forceUpdate();\n  }\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n    console.log(formData);\n  };\n\n  const handleUpdateLoanerInfo = async (e, ID) => {\n    e.preventDefault();\n    try {\n      await axios.post(\n        `https://horntrax-api.herokuapp.com/loaners/update/${ID}`,\n        formData\n      );\n      setFormData({\n        type: \"\",\n        brand: \"\",\n        serial: \"\",\n        barcode: \"\",\n        location: \"\",\n      });\n      forceUpdate();\n      setShowModal(false);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      {instruments.length == 0 ? (\n        <Audio\n          height=\"80\"\n          width=\"80\"\n          radius=\"9\"\n          color=\"blue\"\n          ariaLabel=\"loading\"\n          wrapperStyle\n          wrapperClass\n        />\n      ) : (\n        <div className=\"loanersViewContainer\">\n          <div className=\"top-container\">\n            <AddLoaner forceUpdate={forceUpdate} />\n\n            <div className=\"searchBar\">\n              <div className=\"searchBarAndButton\">\n                <input\n                  onChange={(event) => setQuery(event.target.value)}\n                  value={query}\n                  placeholder=\"search anything...\"\n                ></input>\n\n                <div className=\"clearButton\">\n                  <Button onClick={() => clear()}>Clear</Button>\n                </div>\n              </div>\n              <DropDown\n                data={instruments}\n                action={updateSelectedType}\n                selector={{ value: \"type\" }}\n              />\n            </div>\n          </div>\n          <div className=\"cards-container\">\n            {filteredInstruments?.map((instrument) => (\n              <Card\n                style={{\n                  borderRadius: \"4px\",\n                  width: \"100vw\",\n                  textAlign: \"center\",\n                  justifyContent: \"center\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  marginTop: \"10px\",\n                }}\n                key={instrument._id}\n              >\n                <Card.Body>\n                  <Card.Title>\n                    <Button\n                      className=\"btn-instrument btn-primary\"\n                      onClick={() => {\n                        setShowModal(true);\n                        setSelectedInstrument(instrument);\n                        setFormData({\n                          type: instrument.type,\n                          brand: instrument.brand,\n                          serial: instrument.serial,\n                          barcode: instrument.barcode,\n                          location: instrument.location,\n                          dateLastServiced: instrument.dateLastServiced.slice(\n                            0,\n                            10\n                          ),\n                        });\n                      }}\n                    >\n                      {instrument.type}\n                    </Button>\n                  </Card.Title>\n\n                  <Card.Text>\n                    Brand: {instrument.brand}\n                    <br></br>\n                    Serial: {instrument.serial}\n                    <br></br>\n                    Location: {instrument.location}\n                    <br></br>\n                  </Card.Text>\n                </Card.Body>\n              </Card>\n            ))}\n          </div>\n        </div>\n      )}\n      <div className=\"reactModal\">\n        <ReactModal\n          isOpen={showModal}\n          ariaHideApp={false}\n          contentLabel=\"directory modal\"\n          shouldReturnFocusAfterClose={true}\n          onRequestClose={() => onRequestClose()}\n          shouldCloseOnOverlayClick={true}\n          style={{\n            overlay: {\n              backgroundColor: \"white\",\n              zIndex: 2,\n              width: \"100%\",\n            },\n            content: {\n              backgroundColor: \"#71c7ec\",\n            },\n          }}\n        >\n          {deleteMessage.show ? (\n            <Alert\n              variant=\"danger\"\n              onClose={() => setDeleteMessage({ message: \"\", show: false })}\n            >\n              <Alert.Heading>{deleteMessage.message}</Alert.Heading>\n            </Alert>\n          ) : null}\n          <button\n            className=\"modalCloseButton\"\n            onClick={() => onRequestClose()}\n            style={{\n              height: \"40px\",\n              width: \"40px\",\n              color: \"#3794ca\",\n              marginLeft: \"92%\",\n            }}\n          >\n            X\n          </button>\n          <div>\n            <div className=\"useInfo\">\n              <h2 className=\"updateFormTitle\">DETAIL VIEW</h2>\n              <h2 className=\"updateFormTitle\">Instrument: {formData.type}</h2>\n              <InputGroup className=\"modal-text\">\n                <Form.Label>Brand: {\" \" + formData.brand}</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  value={formData.brand}\n                  onChange={handleChange}\n                  name=\"brand\"\n                  placeholder={formData.brand}\n                  aria-label=\"Update Brand of Instrument\"\n                  aria-describedby=\"basic-addon2\"\n                ></Form.Control>{\" \"}\n                <Form.Label>Serial#: {\" \" + formData.serial}</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  value={formData.serial}\n                  name=\"serial\"\n                  placeholder={formData.serial}\n                  onChange={handleChange}\n                  aria-label=\"Update serial of Instrument\"\n                  aria-describedby=\"basic-addon2\"\n                ></Form.Control>{\" \"}\n                <Form.Label>Barcode: {\" \" + formData.barcode}</Form.Label>\n                <Form.Control\n                  type=\"number\"\n                  value={formData.barcode}\n                  name=\"barcode\"\n                  placeholder={formData.barcode}\n                  onChange={handleChange}\n                  aria-label=\"Update barcode of Instrument\"\n                  aria-describedby=\"basic-addon2\"\n                ></Form.Control>{\" \"}\n                <Form.Label>Location: {formData.location}</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  value={formData.location}\n                  name=\"location\"\n                  placeholder={formData.location}\n                  onChange={handleChange}\n                  aria-label=\"Update location of Instrument\"\n                  aria-describedby=\"basic-addon2\"\n                ></Form.Control>\n                <Form.Label>\n                  Date of last service:\n                  {\" \" + formData.dateLastServiced}\n                </Form.Label>\n                <Form.Control\n                  type=\"date\"\n                  name=\"dateLastServiced\"\n                  placeholder={formData.dateLastServiced}\n                  value={formData.dateLastServiced}\n                  onChange={handleChange}\n                  aria-label=\"Update date of last service\"\n                  aria-describedby=\"basic-addon2\"\n                ></Form.Control>\n              </InputGroup>\n              <div className=\"updateFormButtonsContainer\">\n                <Button\n                  className=\"btn-loaner-update\"\n                  onClick={(e) =>\n                    handleUpdateLoanerInfo(e, selectedInstrument._id)\n                  }\n                >\n                  Update Information\n                </Button>\n                <Button\n                  value={selectedInstrument._id}\n                  onClick={(e) => deleteLoaner(e.target.value)}\n                >\n                  Delete Instrument\n                </Button>\n              </div>\n            </div>\n          </div>\n        </ReactModal>\n      </div>\n    </>\n  );\n}\n\nexport default InstrumentList;\n","/Users/fredpasqua/Desktop/client-loaners_project/src/AddLoaner.js",[],[],[],"/Users/fredpasqua/Desktop/client-loaners_project/src/select.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":121,"column":27,"nodeType":"38","messageId":"39","endLine":121,"endColumn":29},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]